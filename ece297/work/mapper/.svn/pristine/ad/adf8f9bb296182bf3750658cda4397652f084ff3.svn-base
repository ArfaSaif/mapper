/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

#include "StreetsDatabaseAPI.h"
#include "LatLon.h"
#include "graphics.h"
#include "m1.h"
#include "m2.h"
#include "m2_2.h"
#include "m3.h"
#include "m3_2.h"
#include <algorithm>
#include <vector>
#include <unordered_map>
#include <cmath> 
#include <queue> 


#include "Edges.h"
#include "IntersectionNode.h"
#include "Graph.h"


//int num_intersections = getNumberOfIntersections();
//int num_poi =  getNumberOfPointsOfInterest();



//struct Graph* intersection_graph = create_graph(num_intersections);
//struct Graph* poi_graph = create_graph(num_poi);

//double maximum_speed;

//void load_poi_graph(){

//}

std::vector<unsigned> reconstruct_path( std::vector<unsigned> &came_from){

    unsigned node_id1;
     unsigned node_id2;
    unsigned id=0;
    double min_trav=0.0;
    bool first=true;
    std::vector<unsigned> total_path;
    
    for (unsigned i = 0; i < came_from.size() - 1; i++){
        node_id1 = came_from[i];
        node_id2 = came_from[i+1];
        auto adjacent = map_graph.all_intersections[node_id1].adjacent_intersection_ids;
        
        for(unsigned k=0; k < adjacent.size(); k++){
            if(adjacent[k].get_to() == node_id2 ){
                if(first||min_trav>adjacent[k].travel_time){
                    min_trav=adjacent[k].travel_time;
                    id=adjacent[k].street_ss_id;
                    first=false;
                }
                                           
            }
        }
        total_path.push_back(id);
        first=true;
        
    }
    
    return total_path;
}

double get_heuristic(unsigned successor_id, unsigned end_id){
    LatLon point1 = getIntersectionPosition(successor_id);
    LatLon point2 = getIntersectionPosition(end_id);
    double distance = find_distance_between_two_points(point1, point2);
 
    double speed = map_graph.max_speed;
    
    double time = distance / speed;
    
    return time;
}

double get_heuristic2(unsigned successor_id, unsigned end_id){
    LatLon point1 = getIntersectionPosition(successor_id);
    LatLon point2 = getIntersectionPosition(end_id);
    double distance = find_distance_between_two_points(point1, point2);
    double max=0.0;
    double max_speed=map_graph.max_speed;;
    double speed=0.0;
    bool new_speed;
    //double speed = map_graph.max_speed;
    auto adj= map_graph.all_intersections[successor_id].adjacent_intersection_ids;
    
    for(unsigned i=0;i<adj.size();++i){
            speed=getStreetSegmentInfo(adj[i].street_ss_id).speedLimit;
            if(i==0||max<speed){
                max=speed;
            }
        if(adj[i].get_to()==end_id){
            max=speed;
            break;
        }
    }
    max=1000.0/3600.0*max;
    
  
    
    
    double time = distance / max;
    
    return time;
}

std::vector<unsigned> construct_path(std::unordered_map<unsigned,unsigned> &camefrom, unsigned current){
   // std::vector<unsigned>path;
    //path.push_back(current);
    
    if(camefrom.find(current) == camefrom.end()){
        std::vector<unsigned > path2;
        path2.push_back(current);
        return path2;
    }
   auto path=construct_path(camefrom, camefrom[current]);
    path.push_back(current);
    
    return path;
}


class Intersection_Node_Pair{
    double f;
    IntersectionNode i_node;
public:
    Intersection_Node_Pair(double _f, IntersectionNode _i_node){
        f = _f;
        i_node = _i_node;
    }
    double get_f() const {
        return f;
    }
    IntersectionNode get_i_node() const {
        return i_node;
    }
};

class Min_F{
public:
    double operator() (const Intersection_Node_Pair& node1, 
            const Intersection_Node_Pair& node2){
        double f = node1.get_f() > node2.get_f();
        return f;
    }
};

////    unsigned num_intersections = getNumberOfIntersections();
/////////////////// A* Algorithm ///////////////////////////////////////////////////
//std::vector<unsigned> a_star(unsigned start_id, unsigned end_id){
////    Initialize closed set
////    The set of nodes already evaluated 
//    //std::priority_queqe <Intersection_Node_Pair, vector<Intersection_Node_Pair>, 
//    //        Min_F> closed_set;
//    //Initialize open set
//    //The set of currently discovered nodes that are not evaluated
//    //yet.
//    std::priority_queue <Intersection_Node_Pair, std::vector<Intersection_Node_Pair>, 
//            Min_F> open_set;
//    
//    std::vector<unsigned> path;
//    
//    std::unordered_map<unsigned, unsigned> came_from;
//    
//    std::unordered_map<unsigned, Intersection_Node_Pair> open_set_map;
//    std::unordered_map<unsigned, Intersection_Node_Pair> closed_set_map;
//    
//    IntersectionNode start = map_graph.all_intersections[start_id];
//    IntersectionNode end = map_graph.all_intersections[end_id];
//    
//    //std::unordered_map<unsigned, unsigned> came_from; 
//    std::unordered_map<unsigned, double> g_score;
//    //std::unordered_map<unsigned, double> h_score;
//    
//    //Put starting intersection/node in open set with f set to 0
//    // for the first node, value is completely heuristic 
//    g_score.emplace(start_id, 0.0);
//    //h_score.emplace(start_id, get_heuristic(start_id, end_id));
//    
//    open_set.push(Intersection_Node_Pair(0, start));
//    open_set_map.emplace(start_id, Intersection_Node_Pair(0, start));
//    //Intersection nodes for current and successor nodes 
//    IntersectionNode node_successor;
//    IntersectionNode node_current;
//    
//    unsigned node_current_id = start_id;
//    
//    //unsigned end_id = end_id;
//    //while the open set is not empty 
//    while(open_set.size() != 0){
//        //find minimum f in open_set 
//        
//        node_current_id = open_set.top().get_i_node().intersection_id;
//        node_current = open_set.top().get_i_node();
//        
//        //if current node is the destination then exit loop
//        if (node_current_id == end_id){
//            std::vector<unsigned> way = construct_path(came_from, node_current_id);
//            path = reconstruct_path(way);
//            return path;
//        } 
//        
//        //add to closed set
//        //closed_set.push(open_set.top()); 
//        //remove current node from open list 
//        open_set.pop();
//        //add to closed set
//        closed_set_map.emplace(node_current_id, open_set.top()); 
//        //remove current node from open list 
//        open_set_map.erase(node_current_id);
//        
//        //get vector with intersection ids of current node's adjacent nodes
//        //these are the current node's successors 
//        std::vector<Edges> adj = node_current.adjacent_intersection_ids;
//        // for each successor 
//        for (unsigned i = 0; i < adj.size(); i++) {
//            //Get the successors using the graph
//            unsigned node_successor_id = adj[i].get_to();
//            node_successor = map_graph.all_intersections[node_successor_id];
//            // f = g + h
//            // g is cost and h is heuristic 
//            // get g (current and successor)
//            double g = adj[i].travel_time;
//            double h_successor = get_heuristic(node_successor_id, end_id);
//            double temp_g = g + g_score[node_current_id];
//
//            std::unordered_map<unsigned, Intersection_Node_Pair>::const_iterator 
//                    found_os = open_set_map.find(node_successor_id);
//            std::unordered_map<unsigned, Intersection_Node_Pair>::const_iterator 
//                    found_cs = closed_set_map.find(node_successor_id);
//            
//            double f = temp_g + h_successor;
////         
//            if(found_cs != closed_set_map.end() && g_score[node_successor_id] 
//                    <= temp_g){
//                    continue;
//            }
//            if(found_cs == closed_set_map.end() || g_score[node_successor_id] 
//                    > temp_g){
//                        
//               if (found_os == open_set_map.end()) {
//                   open_set_map.emplace(node_successor_id, Intersection_Node_Pair(f, node_successor));
//                   open_set.push(Intersection_Node_Pair(f, node_successor));
//               }
//               
//               g_score[node_successor_id] = temp_g;
//               
//               if(came_from.find(node_successor_id) != came_from.end()){
//                    came_from[node_successor_id] = node_current_id;
//               }
//               else{
//                    came_from.emplace(node_successor_id, node_current_id);
//               }
//            }
//        }
//    }
//               
//    path.clear();
//    return path;
//}

unsigned find_inter(std::unordered_map<unsigned,double> &f_Score, double f_min){
    for(auto i=f_Score.begin();i!=f_Score.end();++i){
        if((i->second)==f_min)
            return (i->first);
    }
    
}


std::vector<unsigned> a_star(unsigned start_id, unsigned end_id,const double turn_penalty){

    std::unordered_map<unsigned, IntersectionNode> closed_set;

    std::vector<double> f_list;

    std::vector<unsigned> path5;
 
    std::unordered_map<unsigned, IntersectionNode> open_set;

    
    IntersectionNode start = map_graph.all_intersections[start_id];
    IntersectionNode end = map_graph.all_intersections[end_id];
    
    std::unordered_map<unsigned, unsigned>came_from; 

    std::unordered_map<unsigned, double>gScore;

    std::unordered_map<double, unsigned>fScore;
    
    std::unordered_map<unsigned,double>fScore2;
  
    
    gScore.emplace(start_id, 0.0);
    double score = get_heuristic(start_id, end_id);
    fScore.emplace(score, start_id);
    
    fScore2.emplace(start_id,score);

    f_list.push_back(score);
    open_set.emplace(start_id, start);

    //Intersection nodes for current and successor nodes 
    IntersectionNode node_successor;
    IntersectionNode node_current;
    
    unsigned node_current_id = start_id;

    while(open_set.size() != 0){
        

        double f_min = *std::min_element(f_list.begin(), f_list.end());
       
        node_current_id = find_inter(fScore2,f_min);
        node_current = map_graph.all_intersections[node_current_id];
        
        
       // std::cout<<node_current_id<<std::endl;
       
        //if current node is the destination then exit loop
            if (node_current_id == end_id ){

                    std::vector<unsigned> way = construct_path(came_from, node_current_id);
                    path5 = reconstruct_path(way);
                    return path5;
               
            } 
        
         //remove current node from open list 
        f_list.erase(std::find(f_list.begin(),f_list.end(),f_min));
        fScore.erase(f_min);
       open_set.erase(node_current_id);
       fScore2.erase(node_current_id);
        closed_set.emplace(node_current_id, node_current);
      
        
        //Get connected street Segments
        std::vector<Edges> adj = map_graph.all_intersections[node_current_id].adjacent_intersection_ids;
        // for each successor 
        for (unsigned i = 0; i < adj.size(); i++) {
          
            unsigned node_successor_id = adj[i].get_to();
            node_successor = map_graph.all_intersections[node_successor_id];
            

            double g = adj[i].travel_time;
            double h_successor=0.0;
            //double h_successor = 0;
             h_successor = get_heuristic(node_successor_id, end_id);
            

            unsigned ss2=adj[i].street_ss_id;
           
            double turn_pen=0.0;
            if(came_from.find(node_current_id) != came_from.end() && turn_penalty != 0.0){
                std::vector<unsigned> inters;
                inters.push_back(came_from[node_current.intersection_id]);
                inters.push_back(node_current_id);
                auto ss_id=reconstruct_path(inters);
                unsigned ss=ss_id[0];
                
                
                
                auto street_segment_info = getStreetSegmentInfo(ss);
                auto street_ID = street_segment_info.streetID;
                
                auto street_segment_info2 = getStreetSegmentInfo(ss2);
                auto street_ID2 = street_segment_info2.streetID;
                
                if(street_ID != street_ID2)
                    turn_pen = turn_penalty;
                
                
            }
            //auto id =came_from[node_current_id]
            double successor_current_cost = gScore[node_current_id] + g + turn_pen;

            
            std::unordered_map<unsigned, IntersectionNode>::const_iterator found_os = open_set.find(node_successor_id);
            std::unordered_map<unsigned, IntersectionNode>::const_iterator found_cs = closed_set.find(node_successor_id);
           
                double f_successor = successor_current_cost + h_successor;

            if(found_os!=open_set.end()){
                if(gScore[node_successor_id]<=successor_current_cost)
                    continue;
            }
            else if(found_cs != closed_set.end()){
                if (gScore[node_successor_id] <= successor_current_cost)
                    continue;
                f_list.push_back(f_successor);
                open_set.emplace(node_successor_id, node_successor);
                closed_set.erase(node_successor_id);
                fScore[f_successor]=node_successor_id;
                 fScore2[node_successor_id]=f_successor;
               
            }
            else{
                open_set.emplace(node_successor_id,node_successor);
               
                 if(fScore2.find(node_successor_id) != fScore2.end()){
                     fScore[f_successor] = node_successor_id;
                    f_list.erase(std::find(f_list.begin(),f_list.end(),fScore2[node_successor_id]));
                    f_list.push_back(f_successor);
                    fScore2[node_successor_id]=f_successor;
             }
                
                 else{
                    fScore.emplace(f_successor, node_successor_id);
                    f_list.push_back(f_successor);
                     fScore2.emplace(node_successor_id,f_successor);
                 }
            }
               gScore[node_successor_id] = successor_current_cost;
               if(came_from.find(node_successor_id) != came_from.end()){
                    came_from[node_successor_id] = node_current_id;
                }
                else{
                    came_from.emplace(node_successor_id,node_current_id);
                }
                
                 // gScore[node_successor_id] = successor_current_cost;
                  f_successor = gScore[node_successor_id] + h_successor;
                  
                   
                   if (found_os == open_set.end()){
                
                     f_list.push_back(f_successor);
                      fScore[f_successor]=node_successor_id;
                      fScore2[node_successor_id]=f_successor;
                    //f_list.push_back(f_successor);
                    open_set.emplace(node_successor_id, node_successor);
                     if (found_cs != closed_set.end())
                         closed_set.erase(node_successor_id);
               
                
                }
            }
//            
    }

       path5.clear();

 return path5;
}

// Returns the time required to travel along the path specified, in seconds. 
// The path is given as a vector of street segment ids, and this function 
// can assume the vector either forms a legal path or has size == 0.
// The travel time is the sum of the length/speed-limit of each street 
// segment, plus the given turn_penalty (in seconds) per turn implied by the path. 
// A turn occurs when two consecutive street segments have different street IDs.
double compute_path_travel_time(const std::vector<unsigned>& path, 
                                const double turn_penalty){
    double travel_time = 0;
    int num_turns = 0;
    double street_segment_travel_time = 0;
    
    if (path.size() == 0){
        return travel_time;
    }
    
    for (unsigned i = 0; i < path.size(); i++){
        street_segment_travel_time = find_street_segment_travel_time(path[i]);
        
        if (i != path.size() - 1){
            
            auto street_segment_info = getStreetSegmentInfo(path[i]);
            auto street_segment_ID = street_segment_info.streetID;
            std::string street_segment_name = getStreetName(street_segment_ID);
            
            auto street_segment_info1 = getStreetSegmentInfo(path[i + 1]);
            auto street_segment_ID1 = street_segment_info1.streetID;
            std::string street_segment_name1 = getStreetName(street_segment_ID1);
            
            
           if (street_segment_ID != street_segment_ID1){
                num_turns++;
            } 
//            if (street_segment_name != street_segment_name1){
//                num_turns++;
//            }
            
        }
       
        travel_time = travel_time + street_segment_travel_time;
        
    }
    
    travel_time += num_turns * turn_penalty;
    
    return travel_time;
}


// Returns a path (route) between the start intersection and the end 
// intersection, if one exists. This routine should return the shortest path
// between the given intersections when the time penalty to turn (change
// street IDs) is given by turn_penalty (in seconds).
// If no path exists, this routine returns an empty (size == 0) vector. 
// If more than one path exists, the path with the shortest travel time is 
// returned. The path is returned as a vector of street segment ids; traversing 
// these street segments, in the returned order, would take one from the start 
// to the end intersection.
std::vector<unsigned> find_path_between_intersections(const unsigned intersect_id_start, 
                                                      const unsigned intersect_id_end,
                                                      const double turn_penalty){
    
    
    
    //If the intersections are connected directly then return one segment
    std::vector<unsigned> path_between_intersections;
    
    //Check that the intersect ids are within range of available intersections
    if(intersect_id_start>(getNumberOfIntersections()-1)||intersect_id_end>(getNumberOfIntersections()-1))
        return path_between_intersections;
        
    
   //If the intersections are connected directly then return one segment
//    if(are_directly_connected(intersect_id_start,intersect_id_end)){
//        std::vector<unsigned> path;
//        path.resize(2);
//        path[0]=intersect_id_start;
//        path[1]=intersect_id_end;
//        path_between_intersections=reconstruct_path(path);
//        return path_between_intersections;
//    }
     unsigned start=intersect_id_start;
     unsigned end=intersect_id_end;
    path_between_intersections =  a_star(start,end, turn_penalty);
    
    return path_between_intersections;
    
}


// Returns the shortest travel time path (vector of street segments) from 
// the start intersection to a point of interest with the specified name.
// The path will begin at the specified intersection, and end on the 
// intersection that is closest (in Euclidean distance) to the point of 
// interest.
// If no such path exists, returns an empty (size == 0) vector.
std::vector<unsigned> find_path_to_point_of_interest(const unsigned intersect_id_start, 
                                               const std::string point_of_interest_name,
                                               const double turn_penalty){
    std::vector<unsigned> path_to_point_of_interest;//Store the fastest path
    
    //If the intersect id is out of bounds
    if(intersect_id_start>getNumberOfPointsOfInterest()-1){
        return path_to_point_of_interest;
    }
    
    //Get poi_ids from the name
    auto poi_ids=find_poi_from_name(point_of_interest_name);
    //LatLon intersect_pos= getIntersectionPosition(intersect_id_start);
    //LatLon point2; 
    //double distance=0.0;
    
    std::vector<unsigned>intersection_closest;
    double travel_time=0.0;
    double minimum_travel_time=0.0;
    //Find the closest intersection for all the poi
    for(unsigned i=0;i<poi_ids.size();++i){
        auto position= get_poi_data(poi_ids[i]).position2;
        intersection_closest.push_back(find_closest_intersection(position));
    }
    //Find paths for each intersections
    for(unsigned j=0;j<intersection_closest.size();++j){
       // point2=getIntersectionPosition(intersection_closest[2]);
         auto paths=find_path_between_intersections(intersect_id_start, intersection_closest[j],turn_penalty);
         if(paths.size()!=0){
             travel_time=compute_path_travel_time(paths,turn_penalty);
             if(travel_time<minimum_travel_time||j==0){
                 minimum_travel_time=travel_time;
                 path_to_point_of_interest=paths;
             }
         }
    }
    
    
   
    //
    
    
    
    
    return path_to_point_of_interest;
    
}
