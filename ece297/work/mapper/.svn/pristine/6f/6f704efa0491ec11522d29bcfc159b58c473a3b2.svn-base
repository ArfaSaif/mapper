/* 
 * Copyright 2018 University of Toronto
 *
 * Permission is hereby granted, to use this software and associated 
 * documentation files (the "Software") in course work at the University 
 * of Toronto, or for personal use. Other uses are prohibited, in 
 * particular the distribution of the Software either publicly or to third 
 * parties.
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <iostream>
#include <string>

#include "m1.h"
#include "m2.h"
#include "m2_2.h"
#include "m3.h"
#include "m4.h"
#include "m4_2.h"


#include "graphics.h"

//Program exit codes
constexpr int SUCCESS_EXIT_CODE = 0;        //Everyting went OK
constexpr int ERROR_EXIT_CODE = 1;          //An error occured
constexpr int BAD_ARGUMENTS_EXIT_CODE = 2;  //Invalid command-line usage

//The default map to load if none is specified
std::string default_map_path = "/cad2/ece297s/public/maps/toronto_canada.streets.bin";
std::string default_map_path_OSM = "/cad2/ece297s/public/maps/toronto_canada.osm.bin";

int main(int argc, char** argv) {
    
    std::string map_path;
    std::string map_path_osm;
    if(argc == 1) {
        //Use a default map
        map_path = default_map_path;
        map_path_osm=default_map_path_OSM;//Add osm map
    } 
  
    else if (argc == 3) {
        //Get the map from the command line
        map_path = argv[1];
         map_path_osm=argv[2];
    } else {
        //Invalid arguments
        std::cerr << "Usage: " << argv[0] << " [map_file_path]\n";
        std::cerr << "  If no map_file_path is provided a default map is loaded.\n";
        return BAD_ARGUMENTS_EXIT_CODE;
    }
    std::cout<< "Your H.A.S. Maps is loading....Please wait..."<<std::endl;
    //Load the map and related data structures
    bool load_success = load_map(map_path);
    bool load_OSM=loadOSMDatabaseBIN(map_path_osm);
    
    
    if(!load_success) {
        std::cerr << "Failed to load map '" << map_path << "'\n";
        return ERROR_EXIT_CODE;
    }
    if(!load_OSM){
        std::cerr << "Failed to load map '" << map_path_osm << "'\n";
        return ERROR_EXIT_CODE;
    }

    std::cout << "Successfully loaded map of Toronto, Canada" << "'\n";
      
    //You can now do something with the map data
   //draw_map(); 
    
    std::vector<DeliveryInfo> deliveries;
    std::vector<unsigned> depots;
    std::vector<unsigned> result_path;
    float turn_penalty;

    deliveries = {DeliveryInfo(73593, 104453), DeliveryInfo(1981, 47060), DeliveryInfo(58204, 31403), DeliveryInfo(102129, 63975), DeliveryInfo(41153, 63608)};
    depots = {2521, 5153, 41138};
    turn_penalty = 15;
    result_path = traveling_courier(deliveries, depots, turn_penalty);
    
////    deliveries = {DeliveryInfo(7552, 11395), DeliveryInfo(20877, 76067), DeliveryInfo(76915, 76067), DeliveryInfo(108204, 76067), DeliveryInfo(108204, 99189), DeliveryInfo(32523, 99189), DeliveryInfo(32523, 92242), DeliveryInfo(32523, 99189), DeliveryInfo(32523, 52119)};
////    depots = {32736, 27838, 28149};
////    turn_penalty = 15;
////    result_path = traveling_courier(deliveries, depots, turn_penalty);
////    
//    
    
//    std::vector<DeliveryInfo> deliveries;
//        std::vector<unsigned> depots;
//        float turn_penalty;
//        std::vector<unsigned> result_path;
//        bool is_legal;
//        
//        deliveries = {DeliveryInfo(79796, 42839), DeliveryInfo(6620, 18908), DeliveryInfo(12917, 69324), DeliveryInfo(4009, 76027), DeliveryInfo(78640, 49449), DeliveryInfo(21674, 90763), DeliveryInfo(50896, 23880), DeliveryInfo(74090, 53653), DeliveryInfo(2111, 61148), DeliveryInfo(43971, 1223), DeliveryInfo(50063, 91913), DeliveryInfo(82083, 84759), DeliveryInfo(105386, 101774), DeliveryInfo(107769, 57682), DeliveryInfo(82981, 96244), DeliveryInfo(8738, 34980), DeliveryInfo(1342, 95587), DeliveryInfo(42483, 103377), DeliveryInfo(1161, 103664), DeliveryInfo(21428, 77598), DeliveryInfo(71316, 23235), DeliveryInfo(95619, 32911), DeliveryInfo(99061, 18848), DeliveryInfo(93949, 20039), DeliveryInfo(67982, 12095), DeliveryInfo(11945, 105365), DeliveryInfo(94347, 20391), DeliveryInfo(92583, 13875), DeliveryInfo(2811, 42442), DeliveryInfo(20951, 31516), DeliveryInfo(104712, 15493), DeliveryInfo(25003, 55427), DeliveryInfo(23213, 50781), DeliveryInfo(33297, 94451), DeliveryInfo(91792, 620), DeliveryInfo(94877, 17273), DeliveryInfo(42021, 30653), DeliveryInfo(45453, 80507), DeliveryInfo(19701, 9255), DeliveryInfo(100880, 11642), DeliveryInfo(43478, 97117), DeliveryInfo(37661, 18514), DeliveryInfo(27367, 105658), DeliveryInfo(4306, 54259), DeliveryInfo(107255, 358), DeliveryInfo(90985, 90550), DeliveryInfo(105483, 54918), DeliveryInfo(52218, 24878), DeliveryInfo(64146, 14569), DeliveryInfo(96695, 6359), DeliveryInfo(77408, 7132), DeliveryInfo(475, 94272), DeliveryInfo(94111, 10286), DeliveryInfo(102213, 28393), DeliveryInfo(31031, 5428), DeliveryInfo(61407, 87201), DeliveryInfo(52502, 25739), DeliveryInfo(64678, 11041), DeliveryInfo(7230, 43223), DeliveryInfo(42470, 32197), DeliveryInfo(17541, 79209), DeliveryInfo(38249, 15541), DeliveryInfo(44546, 79051), DeliveryInfo(11121, 102845), DeliveryInfo(55855, 31136), DeliveryInfo(38533, 45203), DeliveryInfo(82603, 34501), DeliveryInfo(84243, 24909), DeliveryInfo(69588, 744), DeliveryInfo(10546, 6312), DeliveryInfo(16898, 19546), DeliveryInfo(43784, 60601), DeliveryInfo(64789, 68213), DeliveryInfo(28003, 21779), DeliveryInfo(17561, 48204), DeliveryInfo(69514, 34766), DeliveryInfo(17040, 74080), DeliveryInfo(91356, 102978), DeliveryInfo(6292, 87024), DeliveryInfo(65826, 27845), DeliveryInfo(80009, 86251), DeliveryInfo(105642, 44253), DeliveryInfo(16066, 8023), DeliveryInfo(20106, 87653), DeliveryInfo(66771, 16683), DeliveryInfo(90038, 88410), DeliveryInfo(40917, 83054), DeliveryInfo(60050, 94321), DeliveryInfo(55413, 11814), DeliveryInfo(56359, 1693), DeliveryInfo(23931, 47427), DeliveryInfo(86665, 93996), DeliveryInfo(79695, 16400), DeliveryInfo(58624, 21665), DeliveryInfo(82028, 43899), DeliveryInfo(30893, 19071), DeliveryInfo(31114, 26049), DeliveryInfo(31066, 56617), DeliveryInfo(103338, 92746), DeliveryInfo(7629, 13181)};
//        depots = {8552, 38211, 92758, 39860, 100277, 17123, 6130, 40760, 5413, 47813}; 
//    turn_penalty = 15;
//    result_path = traveling_courier(deliveries, depots, turn_penalty);
    //std::cout << deliveries.size();
    std::cout << "Closing map\n";
   
    delete_all();
    close_map();
    closeOSMDatabase();

    return SUCCESS_EXIT_CODE;
}
